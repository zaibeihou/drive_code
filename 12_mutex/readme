互斥锁(mutex)和信号量(semaphore)的休眠特性有一些重要的区别：

原子性和调度特性


互斥锁:

当mutex_lock()无法获取锁时,会将当前进程放入等待队列并立即进入休眠
解锁时会唤醒等待队列中的第一个进程
强调公平性,通常是FIFO顺序唤醒


信号量:

通过down()获取信号量时如果值为0,也会休眠
但信号量的调度策略更灵活,可以实现优先级调度
同时可以实现广播唤醒(一次up()可以唤醒多个等待者)




中断上下文


互斥锁不能在中断上下文中使用,因为中断上下文不能休眠
信号量也不能在中断上下文使用


原子上下文

// 互斥锁提供trylock接口,不会休眠
int mutex_trylock(struct mutex *lock);

// 信号量也有类似接口
int down_trylock(struct semaphore *sem);

休眠的可中断性

// 互斥锁提供可中断的加锁
int mutex_lock_interruptible(struct mutex *lock);

// 信号量也支持可中断的获取
int down_interruptible(struct semaphore *sem);

适用场景


互斥锁:

用于保护短小的临界区
对性能要求高的场景
需要所有权语义的场景


信号量:

用于较长时间的阻塞等待
需要复杂同步的场景
资源计数与同步的场景



所以虽然二者都有休眠特性,但在具体实现和使用场景上还是有明显区别的。一般来说,如果只需要简单的互斥访问,优先使用互斥锁;如果需要更复杂的同步与调度,则考虑使用信号量。



在互斥锁(mutex)中，try相关的操作（如try_lock）表示一个非阻塞的尝试获取锁的操作。让我详细解释：
普通的互斥锁获取（lock）有两个特点：

如果锁当前可用，则获取锁并继续执行
如果锁不可用，则线程会阻塞等待，直到能获取到锁

而try_lock的特点是：

如果锁当前可用，则获取锁并返回true
如果锁不可用，则立即返回false，不会阻塞等待

举个例子：
std::mutex mtx;

// 普通的lock()
mtx.lock();    // 如果锁被占用，这里会阻塞等待

// try_lock()
if(mtx.try_lock()) {
    // 成功获取到锁，执行相关操作
    //...
    mtx.unlock();
} else {
    // 没有获取到锁，可以执行其他替代逻辑
    //...
}
try_lock的主要应用场景：

需要尝试获取多个锁时，避免死锁
当获取不到锁时，需要立即执行其他替代方案
实现超时机制时（与try_lock_for或try_lock_until配合）
避免程序长时间阻塞在某个锁上

这种机制提供了更灵活的锁管理方式，让程序能够更好地处理资源竞争的情况。
在使用 try_lock() 时：

try_lock() 失败后直接返回 false：


不会主动让出 CPU
线程会继续执行之后的代码
CPU 时间片会正常用完后才被调度


这与 lock() 的阻塞等待不同：


lock() 在等待时会将线程置于睡眠状态
会主动让出 CPU 给其他线程使用
直到被唤醒(获得锁)才会继续执行

举个例子:
std::mutex mtx;

// 情况1：使用 try_lock()
while(!mtx.try_lock()) {
    // 获取锁失败后继续执行这个循环
    // 不会让出 CPU，会占用 CPU 资源
}

// 情况2：使用 lock() 
mtx.lock();  
// 获取不到锁时会让出 CPU
// 线程进入睡眠状态，不占用 CPU 资源
如果你希望在 try_lock() 失败时也能让出 CPU，可以：

使用 std::this_thread::yield()
使用 sleep 函数
直接使用 lock() 代替

std::mutex mtx;

// 方案1：配合 yield
while(!mtx.try_lock()) {
    std::this_thread::yield();  // 主动让出 CPU
}

// 方案2：配合 sleep
while(!mtx.try_lock()) {
    std::this_thread::sleep_for(std::chrono::milliseconds(1));
} CopyRetryC那自旋锁的try呢Edit自旋锁的 try 操作(try_lock)与互斥锁类似,但有一些重要区别:

实现机制:

// 自旋锁的典型 try_lock 实现
bool try_lock() {
    return atomic_flag.test_and_set(std::memory_order_acquire) == false;
    // 仅尝试一次原子操作
    // 无论成功失败都立即返回
}

// 对比普通的自旋锁实现
void lock() {
    while(atomic_flag.test_and_set(std::memory_order_acquire)) {
        // 循环执行,直到成功
    }
}

特点:

try_lock 只尝试一次获取锁
不会进入自旋等待状态
不会占用 CPU 资源进行忙等待
立即返回成功或失败

CPU 处理:

不会主动让出 CPU
但由于没有循环等待,执行时间很短
执行完立即返回,CPU 可以继续其他工作

使用场景:

cppCopyspin_lock lock;

if(lock.try_lock()) {
    // 获取锁成功,处理关键区域
    //...
    lock.unlock();
} else {
    // 获取失败,可以:
    // 1. 执行其他任务
    // 2. 稍后重试
    // 3. 选择其他同步方式
}
所以总结来说,自旋锁的 try_lock:

就是一次性的原子操作尝试
不会像普通自旋锁那样占用 CPU 资源
能够避免死锁和资源浪费
提供了更灵活的锁管理选择
