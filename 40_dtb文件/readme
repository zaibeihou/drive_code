dtb文件四部分：
	头部、内存预留部分、字符块、结构体块

头部：
开头前十个 四字节 分别为头部内容 
 structfdt_header{
 	uint32_tmagic; //设备树头部的魔数
	uint32_ttotalsize; //设备树文件的总大小
	uint32_toff_dt_struct; //设备树结构体（节点数据）相对于文件开头的偏移量
	uint32_toff_dt_strings; //设备树字符串表相对于文件开头的偏移量
	uint32_toff_mem_rsvmap; //内存保留映射表相对于文件开头的偏移量
	uint32_tversion; //设备树版本号
	uint32_tlast_comp_version; //最后一个兼容版本号
	uint32_tboot_cpuid_phys; //启动CPU的物理ID
 	uint32_tsize_dt_strings; //设备树字符串表的大小
	uint32_tsize_dt_struct; //设备树结构体（节点数据）的大小
	};



其后的四字节是内存保留映射表
struct fdt_reserve_entry {
 	uint64_t address;
 	uint64_t size;
};

内存保留块（MemoryReservedBlock）是用于客户端程序的保护和保留物理内存区域的列表。
这些保留区域不应被用于一般的内存分配，而是用于保护重要数据结构，以防止客户端程序覆盖这些数据。
内存保留块的目的是确保特定的内存区域在客户端程序运行时不被修改或使用。
由于在示例设备树中没有设置内存保留块，所以相应的区域都为0，

保留区域列表：内存保留块是一个由一组 64 位大端整数对构成的列表。每对整数对应
一个保留内存区域，其中包含物理地址和区域的大小（以字节为单位）。这些保留区域应该彼
此不重叠。

保留区域的用途：客户端程序不应访问内存保留块中的保留区域，除非引导程序提供的
其他信息明确指示可以访问。引导程序可以使用特定的方式来指示客户端程序可以访问保留内
存的部分内容。引导程序可能会在文档、可选的扩展或特定于平台的文档中说明保留内存的特
定用途


其次为结构体块
结构块是设备树中描述设备树本身结构和内容的部分。它由一系列带有数据的令牌序列组
成，这些令牌按照线性树结构进行组织。

十六进制数值
代表含义
00000001  根节点的开始
00000000 根节点没有节点名，所以这里名字为0
00000003 设备树中属性的开始
00000017 代表该属性的大小，换算成十进制为23，也就是"Thisismydevicetree!"这一字符串的长度
00000000 代表该属性在字符串块的偏移量，这里为0，表示无偏移

54686973
65210000
model 的具体值


最后是字符块
字符串块用于存储设备树中使用的所有属性名称。它由一系列以空字符结尾的字符串组
成，这些字符串在字符串块中简单地连接在一起，
（1）字符串连接
字符串块中的字符串以空字符（\0）作为终止符来连接。这意味着每个字符串都以空字符
结尾，并且下一个字符串紧跟在上一个字符串的末尾。这种连接方式使得字符串块中的所有字
符串形成一个连续的字符序列。
（2）偏移量引用
在结构块中，属性的名称是通过偏移量来引用字符串块中的相应字符串的。偏移量是一个
无符号整数值，它表示字符串在字符串块中的位置。通过使用偏移量引用，设备树可以节省空
间，并且在属性名称发生变化时也更加灵活，因为只需要更新偏移量，而不需要修改结构块中
的属性引用。
（3）对齐约束：
字符串块没有对齐约束，这意味着它可以出现在设备树 blob 的任何偏移处。这使得字符
串块的位置在设备树 blob 中是灵活的，并且可以根据需要进行调整，而不会对设备树的解析
和处理造成影响。
字符串块是设备树中用于存储属性名称的部分。它由字符串连接而成，并通过偏移量在结
构块中进行引用。字符串块的灵活位置使得设备树的表示更加紧凑和可扩展。



