range 属性在设备树中主要用于地址转换和总线桥接场景，它描述了一个地址空间到另一个地址空间的映射关系。典型的应用场景包括 PCI 桥、内存控制器等。
range 属性的基本格式是:
ranges = <child-bus-address parent-bus-address length>;
具体解析：

child-bus-address: 子总线空间的起始地址
parent-bus-address: 父总线空间的起始地址
length: 映射的长度

一个实际的例子：
pci@1000 {
    compatible = "vendor,pci-host-controller";
    reg = <0x1000 0x2000>;
    ranges = <0x02000000 0x0 0x10000000  /* PCI内存空间 */
              0x0 0x10000000 0x1000000    /* 映射到CPU物理地址 */
              
              0x01000000 0x0 0x11000000   /* PCI I/O空间 */
              0x0 0x11000000 0x1000>;     /* 映射到CPU物理地址 */
range 属性的几个重要特点：

地址转换


用于定义子地址空间如何映射到父地址空间
支持多组映射关系
每组映射都需要指定起始地址和长度


空属性处理

ranges;  // 空的ranges属性表示1:1映射

不同总线类型的应用


PCI 总线：需要考虑配置空间、内存空间和 I/O 空间
内存控制器：物理内存到 CPU 地址空间的映射
SoC 内部总线：片内各模块的地址映射


特殊用途：

ranges = <0>;  // 表示该节点不支持地址转换
一个更复杂的实例，展示内存控制器的映射：
memory-controller@4000 {
    compatible = "vendor,mem-ctrl";
    reg = <0x4000 0x1000>;
    ranges = <0x0 0x0 0x0 0x80000000    /* SDRAM 映射 */
             0x1 0x0 0x90000000 0x10000000>; /* SRAM 映射 */
};
使用 range 属性时需要注意：

地址对齐


映射的地址通常需要按照总线要求对齐
不同类型的总线可能有不同的对齐要求


大小限制


映射区域的大小通常需要是 2 的幂次方
需要考虑硬件支持的最大寻址范围


重叠检查


不同的映射区域不应该重叠
需要考虑其他设备的地址分配


调试技巧

# 使用 dtc 工具检查设备树语法
dtc -I dts -O dtb -o output.dtb input.dts

# 查看解析后的设备树
dtc -I dtb -O dts output.dtb
range 属性在系统初始化时被内核解析，用于建立地址转换表。正确配置 range 属性对于系统的正常运行至关重要，特别是在涉及多个总线层级的复杂系统中。
