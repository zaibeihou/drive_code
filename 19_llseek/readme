这两种写法有很大的区别：

write(fd, "hello world ", 13):


这里指定写入13个字节
但是字符串 "hello world " 实际长度是12个字符（包括空格）
因此这种写法会额外写入字符串结束后的1个字节，这个字节的内容是不确定的
可能写入了字符串后面内存中的随机数据或'\0'


write(fd, "hello world ", strlen("hello world ")):


使用 strlen() 获取字符串的实际长度
"hello world " 的实际长度是12（包括空格）
这种写法只写入字符串的实际内容
不会写入额外的未知字节
//////////////////////////////////////
printf 在遇到字符串中的 '\0'（空字符，或称为 null 终止符）时就会停止打印。这是因为在 C 语言中，字符串是以 '\0' 结尾的字符数组，printf 使用这个特性来确定字符串的结束位置。
让我们通过一个例子来说明：
#include <stdio.h>
#include <string.h>

int main() {
    char buf[20] = "hello\0world";  // 在"hello"后面显式加入'\0'
    
    printf("字符串打印结果：%s\n", buf);  // 只会打印"hello"
    
    // 查看实际的内存内容
    printf("内存中的实际内容：\n");
    for(int i = 0; i < 10; i++) {
        if(buf[i] == '\0') {
            printf("位置%d: '\\0'\n", i);
        } else {
            printf("位置%d: '%c'\n", i, buf[i]);
        }
    }
    
    // 而write函数会写入指定长度的所有内容，不会因为'\0'而停止
    int fd = open("/dev/test0", O_RDWR);
    write(fd, buf, 10);  // 会写入完整的10个字节，包括'\0'和"world"
    
    return 0;
}
输出可能像这样：
Copy字符串打印结果：hello
内存中的实际内容：
位置0: 'h'
位置1: 'e'
位置2: 'l'
位置3: 'l'
位置4: 'o'
位置5: '\0'
位置6: 'w'
位置7: 'o'
位置8: 'r'
位置9: 'l'
关键区别：

printf 函数：


遇到 '\0' 就停止输出
用于格式化输出字符串
主要用于显示可读的文本


write 函数：


写入指定长度的所有字节
不会因为遇到 '\0' 而停止
用于底层的数据写入

这就是为什么在读取设备时，如果你用 printf 打印包含 '\0' 的内容，可能看不到完整的数据。如果需要查看完整的数据内容，可以这样做：
char buf[20];
ssize_t n = read(fd, buf, sizeof(buf));

// 打印完整的数据内容
for(ssize_t i = 0; i < n; i++) {
    if(buf[i] == '\0') {
        printf("\\0");
    } else {
        printf("%c", buf[i]);
    }
}
printf("\n");
这样就能看到数据中的所有字符，包括 '\0'。
