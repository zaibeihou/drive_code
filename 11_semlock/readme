信号量的基本概念：

信号量维护一个资源计数器
down/P操作(获取资源)会减少计数
up/V操作(释放资源)会增加计数

休眠发生的时机：

P操作(down)的基本逻辑
void down() {
    // 尝试获取信号量
    if(count > 0) {
        count--;  // 还有资源,直接获取
    } else {
        // 没有可用资源时:
        current_thread->state = SLEEPING;  // 改变线程状态为睡眠
        add_to_wait_queue(current_thread); // 加入等待队列
        schedule();  // 触发调度,切换到其他线程
    }
}

唤醒的时机：

V操作(up)的基本逻辑
void up() {
    count++;
    if(!wait_queue.empty()) {
        thread = wait_queue.get();  // 获取等待队列中的线程
        thread->state = READY;      // 将线程标记为就绪状态
        add_to_ready_queue(thread); // 加入就绪队列
    }
}

关键区别：

互斥锁：通常只处理互斥关系(0/1状态)
信号量：可以处理更复杂的同步关系(计数器可以有多个值)
自旋锁：忙等待不休眠
信号量：资源不足时主动休眠

优势：

不会浪费CPU资源进行忙等待
适合长时间的等待场景
可以实现复杂的同步关系

这就是为什么说信号量会引起休眠 - 它是通过主动让线程进入睡眠状态来避免资源浪费。
